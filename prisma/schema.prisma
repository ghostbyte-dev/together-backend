generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model community {
  id                               Int                 @id @default(autoincrement())
  name                             String              @db.VarChar(100)
  code                             Int                 @unique(map: "community_un")
  fk_admin_id                      Int
  user_community_fk_admin_idTouser user                @relation("community_fk_admin_idTouser", fields: [fk_admin_id], references: [id], onUpdate: Restrict, map: "community_FK")
  debt                             debt[]
  request                          request[]
  routine                          routine[]
  shoppinglist_item                shoppinglist_item[]
  calendar_entry                   calendar_entry[]
  user                             user[]
  users                            user[]              @relation("communityUser")
  todo                             todo[]

  @@index([fk_admin_id], map: "community_FK")
}

model user {
  id               Int      @id @default(autoincrement())
  fk_community_id  Int?
  email            String   @unique(map: "user_email_un") @db.VarChar(100)
  verificationcode String?  @unique(map: "user_un") @db.VarChar(90)
  verified         Boolean  @default(false)
  password         String   @db.VarChar(100)
  creationdate     DateTime @default(dbgenerated("(curdate())")) @db.Date
  profile_image    String?  @default("https://i.imgur.com/pWHgnHA.jpg") @db.VarChar(200)

  name                                  String                @db.VarChar(100)
  color                                 String                @default("#2e3039") @db.VarChar(7)
  community                             community?            @relation(fields: [fk_community_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "user_FK")
  community_community_fk_admin_idTouser community[]           @relation("community_fk_admin_idTouser")
  debt_debt_fk_user_creditor_idTouser   debt[]                @relation("debt_fk_user_creditor_idTouser")
  debt                                  debt[]                @relation("debt_fk_user_debitor_idTouser")
  request                               request[]
  routine_user                          routine_user[]
  calendar_entry_user                   calendar_entry_user[]
  communities                           community[]           @relation("communityUser")
  todo                                  todo[]
  password_reset_token                  password_reset_token?

  @@index([fk_community_id], map: "user_FK")
}

model password_reset_token {
  token        String   @unique()
  token_expiry DateTime @db.DateTime(0)
  fk_user_id   Int      @unique
  user         user     @relation(fields: [fk_user_id], references: [id], onDelete: Cascade, map: "password_reset_tokens_FK_1")

  @@index([fk_user_id], map: "password_reset_tokens_FK_1")
}

model request {
  date            DateTime  @default(dbgenerated("(curdate())")) @db.DateTime(0)
  fk_user_id      Int
  fk_community_id Int
  id              Int       @id @default(autoincrement())
  user            user      @relation(fields: [fk_user_id], references: [id], onDelete: Cascade, map: "requests_FK")
  community       community @relation(fields: [fk_community_id], references: [id], onDelete: Cascade, map: "requests_FK_1")

  @@index([fk_user_id], map: "requests_FK")
  @@index([fk_community_id], map: "requests_FK_1")
}

model calendar_entry {
  id                  Int                   @id @default(autoincrement())
  name                String                @db.VarChar(100)
  notes               String?               @db.Text
  date                DateTime              @db.Date
  done                Boolean               @default(false)
  fk_community_id     Int
  fk_routine_id       Int?
  routine             routine?              @relation(fields: [fk_routine_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "task_FK")
  community           community             @relation(fields: [fk_community_id], references: [id], onDelete: Cascade, map: "tasks_FK_2")
  calendar_entry_user calendar_entry_user[]

  @@index([fk_community_id], map: "calendar_entries_FK_2")
  @@index([fk_routine_id], map: "calendar_entry_FK")
}

model calendar_entry_user {
  id                   Int            @id @default(autoincrement())
  fk_user_id           Int
  fk_calendar_entry_id Int
  calendar_entry       calendar_entry @relation(fields: [fk_calendar_entry_id], references: [id], onDelete: Cascade, map: "calendar_entry_user_FK")
  user                 user           @relation(fields: [fk_user_id], references: [id], onDelete: Cascade, map: "calendar_entry_user_FK_1")

  @@index([fk_calendar_entry_id], map: "calendar_entry_user_FK")
  @@index([fk_user_id], map: "calendar_entry_user_FK_1")
}

model routine {
  id              Int              @id @default(autoincrement())
  startDate       DateTime         @db.Date
  interval        Int
  name            String           @db.VarChar(100)
  fk_community_id Int
  active          Boolean          @default(true)
  community       community        @relation(fields: [fk_community_id], references: [id], onDelete: Cascade, map: "routine_FK")
  routine_user    routine_user[]
  calendar_entry  calendar_entry[]

  @@index([fk_community_id], map: "routine_FK")
}

model routine_user {
  id            Int     @id @default(autoincrement())
  fk_user_id    Int
  fk_routine_id Int
  routine       routine @relation(fields: [fk_routine_id], references: [id], onDelete: Cascade, map: "routine_user_FK")
  user          user    @relation(fields: [fk_user_id], references: [id], onDelete: Cascade, map: "routine_user_FK_1")

  @@index([fk_routine_id], map: "routine_user_FK")
  @@index([fk_user_id], map: "routine_user_FK_1")
}

model shoppinglist_item {
  id              Int       @id @default(autoincrement())
  fk_community_id Int
  name            String    @db.VarChar(100)
  done            Boolean   @default(false)
  done_date       DateTime? @db.Date
  community       community @relation(fields: [fk_community_id], references: [id], onDelete: Cascade, map: "shoppinglist_item_FK")

  @@index([fk_community_id], map: "shoppinglist_item_FK")
}

model debt {
  id                  Int       @id @default(autoincrement())
  fk_community_id     Int
  fk_user_creditor_id Int?
  fk_user_debitor_id  Int?
  amount              Decimal   @db.Decimal(10, 2)
  name                String    @db.VarChar(100)
  timestamp           DateTime  @default(dbgenerated("(curdate())")) @db.DateTime(0)
  community           community @relation(fields: [fk_community_id], references: [id], onDelete: Cascade, map: "debt_FK")
  creditor            user?      @relation("debt_fk_user_creditor_idTouser", fields: [fk_user_creditor_id], references: [id], onDelete: SetNull, map: "debt_FK_1")
  debitor             user?      @relation("debt_fk_user_debitor_idTouser", fields: [fk_user_debitor_id], references: [id], onDelete: SetNull, map: "debt_FK_2")

  @@index([fk_community_id], map: "debt_FK")
  @@index([fk_user_creditor_id], map: "debt_FK_1")
  @@index([fk_user_debitor_id], map: "debt_FK_2")
}

model todo {
  id                 Int       @id @default(autoincrement())
  fk_community_id    Int
  fk_user_creator_id Int
  name               String    @db.VarChar(100)
  description        String    @db.VarChar(500)
  creationDate       DateTime  @default(now()) @db.DateTime(0)
  doneDate           DateTime? @db.DateTime(0)
  done               Boolean   @default(false)
  community          community @relation(fields: [fk_community_id], references: [id], onDelete: Cascade, map: "todo_FK_community")
  creator            user      @relation(fields: [fk_user_creator_id], references: [id], onDelete: Cascade, map: "todo_FK_creator")

  @@index([fk_community_id], map: "todo_FK_community")
  @@index([fk_user_creator_id], map: "todo_FK_creator")
}
